{"version":3,"sources":["components/Toggle.js","components/ItemDisplay.js","components/Modal.js","components/Items.js","App.js","serviceWorker.js","index.js"],"names":["classes","navbar","display","justifyContent","button","width","Toggle","_ref","toggleDisplay","enabled","buttonColor","react_default","a","createElement","className","style","concat","onClick","heroBody","buttonContainer","padding","whiteSpace","flex","margin","maxWidth","ItemDisplay","processItems","_useState","useState","_useState2","Object","slicedToArray","items","setItems","background","toString","disabled","Math","max","modalFoot","Modal","closeModal","aria-label","Items","state","modal","_this","setState","_this$state","this","components_Toggle","components_ItemDisplay","components_Modal","Component","App","Items_Items","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6510cf75.chunk.js","sourcesContent":["import React from 'react';\n\nconst classes = {\n\tnavbar: {\n\t\tdisplay: 'flex',\n\t\tjustifyContent: 'flex-end',\n\t},\n\tbutton: {\n\t\twidth: '10vw',\n\t},\n};\n\nconst Toggle = ({ toggleDisplay, enabled }) => {\n\tconst buttonColor = enabled ? 'is-danger' : 'is-success';\n\treturn (\n\t\t<div className=\"navbar is-black\" style={classes.navbar}>\n\t\t\t<div className=\"navbar-item\">\n\t\t\t\t<div\n\t\t\t\t\tclassName={`button is-rounded ${buttonColor}`}\n\t\t\t\t\tonClick={toggleDisplay}\n\t\t\t\t\tstyle={classes.button}\n\t\t\t\t>\n\t\t\t\t\t{enabled ? 'disable' : 'enable'}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Toggle;\n","import React, { useState } from 'react';\n\nconst classes = {\n\theroBody: {\n\t\tdisplay: 'flex',\n\t\tjustifyContent: 'space-between',\n\t},\n\tbuttonContainer: {\n\t\tdisplay: 'flex',\n\t\tjustifyContent: 'center',\n\t\tpadding: '0.5rem',\n\t},\n\tbutton: {\n\t\twhiteSpace: 'nowrap',\n\t\tflex: '1 1 0',\n\t\tmargin: '0.5rem',\n\t\tmaxWidth: '200px',\n\t},\n};\n\nconst ItemDisplay = ({ enabled, processItems }) => {\n\tconst [items, setItems] = useState(0);\n\tconst background = enabled ? 'is-primary' : 'is-grey';\n\treturn (\n\t\t<div className={`hero is-fullheight-with-navbar ${background}`}>\n\t\t\t<div className=\"hero-head\" />\n\t\t\t<div className=\"hero-body\" style={classes.heroBody}>\n\t\t\t\t<div className=\"columns is-centered fullwidth\">\n\t\t\t\t\t<div className=\"column\" />\n\t\t\t\t\t<div className=\"column is-8\">\n\t\t\t\t\t\t<div className=\"card\">\n\t\t\t\t\t\t\t<div className=\"card-header\">\n\t\t\t\t\t\t\t\t<div className=\"card-header-title is-centered is-size-3\">\n\t\t\t\t\t\t\t\t\tItems: {items >= 10 ? '10+' : items.toString()}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<footer className=\"tile is-12 \" style={classes.buttonContainer}>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tclassName=\"button is-warning\"\n\t\t\t\t\t\t\t\t\tdisabled={!enabled}\n\t\t\t\t\t\t\t\t\tonClick={() => setItems(items + 1)}\n\t\t\t\t\t\t\t\t\tstyle={classes.button}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tAdd Item\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tclassName=\"button is-warning\"\n\t\t\t\t\t\t\t\t\tdisabled={!enabled}\n\t\t\t\t\t\t\t\t\tonClick={() => setItems(Math.max(0, items - 1))}\n\t\t\t\t\t\t\t\t\tstyle={classes.button}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tRemove Item\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tclassName=\"button is-info\"\n\t\t\t\t\t\t\t\t\tdisabled={!enabled}\n\t\t\t\t\t\t\t\t\tonClick={() => processItems(items)}\n\t\t\t\t\t\t\t\t\tstyle={classes.button}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tProcess\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</footer>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"column\" />\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div className=\"hero-foot\" />\n\t\t</div>\n\t);\n};\n\nexport default ItemDisplay;\n","import React from 'react';\n\nconst classes = {\n\tmodalFoot: {\n\t\tdisplay: 'flex',\n\t\tjustifyContent: 'flex-end',\n\t},\n};\n\nconst Modal = ({ items, closeModal }) => (\n\t<div className=\"modal is-active\">\n\t\t<div className=\"modal-background\" onClick={closeModal} />\n\t\t<div className=\"modal-card\">\n\t\t\t<header className=\"modal-card-head\">\n\t\t\t\t<p className=\"modal-card-title\">Actual Item Count</p>\n\t\t\t\t<button className=\"delete\" aria-label=\"close\" onClick={closeModal} />\n\t\t\t</header>\n\t\t\t<section className=\"modal-card-body\">\n\t\t\t\t<p>{`You have ${items} ${items === 1 ? 'item' : 'items'}.`}</p>\n\t\t\t</section>\n\t\t\t<footer className=\"modal-card-foot\" style={classes.modalFoot}>\n\t\t\t\t<button className=\"button is-warning\" onClick={closeModal}>\n\t\t\t\t\tDone\n\t\t\t\t</button>\n\t\t\t</footer>\n\t\t</div>\n\t</div>\n);\n\nexport default Modal;\n","import React, { Component } from 'react';\nimport Toggle from './Toggle';\nimport ItemDisplay from './ItemDisplay';\nimport Modal from './Modal';\n\nexport default class Items extends Component {\n\tstate = {\n\t\tenabled: true,\n\t\tmodal: false,\n\t\titems: 0,\n\t};\n\n\ttoggleDisplay = () => {\n\t\tthis.setState({\n\t\t\tenabled: !this.state.enabled,\n\t\t});\n\t};\n\n\tprocessItems = items => {\n\t\tthis.setState({\n\t\t\tmodal: true,\n\t\t\titems,\n\t\t});\n\t};\n\n\tcloseModal = () => {\n\t\tthis.setState({\n\t\t\tmodal: false,\n\t\t});\n\t};\n\n\trender() {\n\t\tconst { enabled, modal, items } = this.state;\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Toggle toggleDisplay={this.toggleDisplay} enabled={enabled} />\n\t\t\t\t<ItemDisplay enabled={enabled} processItems={this.processItems} />\n\t\t\t\t{modal && <Modal items={items} closeModal={this.closeModal} />}\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React from 'react';\nimport './App.scss';\nimport Items from './components/Items';\n\nfunction App() {\n\treturn (\n\t\t<section className=\"App\">\n\t\t\t<Items />\n\t\t</section>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === '[::1]' ||\n\t\t// 127.0.0.1/8 is considered localhost for IPv4.\n\t\twindow.location.hostname.match(\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t\t)\n);\n\nexport function register(config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA'\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl, config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then(registration => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl)\n\t\t.then(response => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null && contentType.indexOf('javascript') === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t'No internet connection found. App is running in offline mode.'\n\t\t\t);\n\t\t});\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\tregistration.unregister();\n\t\t});\n\t}\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'typeface-roboto';\nimport 'typeface-karla';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}